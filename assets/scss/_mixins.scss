@mixin media($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (max-width: #{map-get($breakpoints, $breakpoint)}) {
      @content;
    }
  } @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
  }
}

@mixin media_min($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: #{map-get($breakpoints, $breakpoint)}) {
      @content;
    }
  } @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
  }
}


@mixin media_range($breakpoint, $breakpoint2) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (max-width: #{map-get($breakpoints, $breakpoint2)}) and (min-width: #{map-get($breakpoints, $breakpoint)}) {
      @content;
    }
  } @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
  }
}


@mixin clear {
  &:after {
    content: '';
    clear: both;
    display: table;
  }
}

@mixin container {
  width: 100%;
  padding-right: 1rem;
  padding-left: 1rem;
  margin-right: auto;
  margin-left: auto;

  @include media_min(xs) {
    max-width: 540px;
  }
  @include media_min(sm) {
    max-width: 720px;
  }
  @include media_min(md) {
    max-width: 960px;
  }
  @include media_min(lg) {
    max-width: 1140px;
  }
  @include media_min(xl) {
    max-width: 1320px;
  }
}

@mixin fadehide {
  opacity: 0;
  visibility: hidden;
  pointer-events: none;
  transform: translate3d(0, 1.5rem, 0);
  transition: 0.2s $transition;
  transition-property: opacity, visibility, transform;
}

@mixin fadeshow {
  opacity: 1;
  visibility: visible;
  pointer-events: initial;
  transform: translate3d(0, 0, 0) rotate(0deg);
}